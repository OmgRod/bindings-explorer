---
const { classData } = Astro.props;

function isConvertibleToNumber(val) {
  const num = typeof val === 'string' ? Number(val.trim()) : val;
  return Number.isInteger(num);
}

function toHex(addr) {
  if (!addr) return '-';
  if (addr === 'inline' || addr === 'link') return addr;
  if (isConvertibleToNumber(addr)) {
    return '0x' + Number(addr).toString(16);
  }
  return addr;
}
---

<style>
  /* (same styles as before) */
  table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1rem;
    font-size: 0.95rem;
  }

  th,
  td {
    border-bottom: 1px solid var(--astro-color-gray-2);
    padding: 0.6rem 0.75rem;
    text-align: left;
    vertical-align: middle;
    position: relative;
  }

  th {
    background-color: var(--astro-color-bg-secondary);
    font-weight: 600;
  }

  tr:hover {
    background-color: var(--astro-color-bg-hover, rgba(0, 0, 0, 0.03));
  }

  .type-info {
    color: var(--astro-color-text-secondary);
    font-style: italic;
  }

  .platform-address {
    font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, monospace;
  }

  .copy-btn {
    position: absolute;
    right: 6px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    cursor: pointer;
    padding: 2px;
    display: none;
    color: var(--astro-color-text-muted);
    opacity: 0.6;
    transition: opacity 0.2s ease;
  }

  td:hover .copy-btn {
    display: inline-block;
  }

  .copy-btn:hover {
    opacity: 1;
  }

  .copy-btn svg {
    width: 16px;
    height: 16px;
  }
</style>

<!-- Toastify CSS CDN -->
<link
  rel="stylesheet"
  type="text/css"
  href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css"
/>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Type</th>
      <th>Arguments</th>
      <th>Windows</th>
      <th>macOS Intel</th>
      <th>macOS ARM</th>
      <th>iOS</th>
      <th>Android 32-bit</th>
      <th>Android 64-bit</th>
    </tr>
  </thead>
  <tbody>
    {classData.functions?.map(fn => (
      <tr key={fn.name}>
        <td>{fn.name}</td>
        <td class="type-info">Function</td>
        <td>{fn.args?.map(arg => arg.name || arg).join(', ')}</td>
        {['win', 'imac', 'm1', 'ios', 'android32', 'android64'].map(platform => {
          const hex = toHex(fn.bindings?.[platform]);
          return (
            <td>
              {hex !== '-' ? (
                <>
                  <span class="platform-address">{hex}</span>
                  <button
                    type="button"
                    class="copy-btn"
                    data-copy={hex}
                    aria-label="Copy address"
                    title="Copy address"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="1.5"
                      viewBox="0 0 24 24"
                    >
                      <rect x="9" y="9" width="13" height="13" rx="2" stroke="currentColor" stroke-width="1.5" />
                      <rect x="3" y="3" width="13" height="13" rx="2" fill="none" stroke="currentColor" stroke-width="1.5" />
                    </svg>
                  </button>
                </>
              ) : '-'}
            </td>
          );
        })}
      </tr>
    ))}

    {classData.fields?.map(field => (
      <tr key={field.name}>
        <td>{field.name}</td>
        <td class="type-info">Field</td>
        <td></td>
        {['win', 'imac', 'm1', 'ios', 'android32', 'android64'].map(platform => {
          const hex = toHex(field.bindings?.[platform]);
          return (
            <td>
              {hex !== '-' ? (
                <>
                  <span class="platform-address">{hex}</span>
                  <button
                    type="button"
                    class="copy-btn"
                    data-copy={hex}
                    aria-label="Copy address"
                    title="Copy address"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      fill="none"
                      stroke="currentColor"
                      stroke-width="1.5"
                      viewBox="0 0 24 24"
                    >
                      <rect x="9" y="9" width="13" height="13" rx="2" stroke="currentColor" stroke-width="1.5" />
                      <rect x="3" y="3" width="13" height="13" rx="2" fill="none" stroke="currentColor" stroke-width="1.5" />
                    </svg>
                  </button>
                </>
              ) : '-'}
            </td>
          );
        })}
      </tr>
    ))}
  </tbody>
</table>

<!-- <link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css"
/>

<script src="https://cdn.jsdelivr.net/npm/toastify-js"></script> -->

<script>
  document.addEventListener('DOMContentLoaded', () => {
    document.addEventListener('click', async e => {
      const target = e.target.closest('.copy-btn');
      if (!target) return;

      const text = target.getAttribute('data-copy');
      if (!text) return;

      try {
        if (navigator.clipboard) {
          await navigator.clipboard.writeText(text);
        } else {
          const textarea = document.createElement('textarea');
          textarea.value = text;
          textarea.style.position = 'fixed';
          textarea.style.opacity = '0';
          document.body.appendChild(textarea);
          textarea.focus();
          textarea.select();
          document.execCommand('copy');
          document.body.removeChild(textarea);
        }

        // Toastify({
        //   text: "Copied to clipboard",
        //   duration: 2500,
        //   gravity: "bottom",
        //   position: "center",
        //   backgroundColor: "#333",
        //   close: false,
        //   stopOnFocus: true,
        //   style: {
        //     color: "#fff",
        //     border: "1px solid #444",
        //     borderRadius: "6px",
        //     boxShadow: "0 4px 14px rgba(0,0,0,0.3)"
        //   }
        // }).showToast();

      } catch (err) {
        console.error(err);
        // Toastify({
        //   text: "Failed to copy",
        //   duration: 2500,
        //   gravity: "bottom",
        //   position: "center",
        //   backgroundColor: "#ff4d4d",
        //   close: false,
        //   stopOnFocus: true,
        // }).showToast();
      }
    });
  });
</script>
