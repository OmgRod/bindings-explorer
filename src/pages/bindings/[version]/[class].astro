---
import fs from 'fs';
import path from 'path';
import ClassTable from '../../../components/ClassTable.jsx';
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';

function sanitizeName(name) {
  return name.replace(/[:<>?"*|\\/]/g, '_');
}

export async function getStaticPaths() {
  const versionsDir = path.resolve('src/data/versions');
  const versions = fs.readdirSync(versionsDir);

  const paths = [];

  for (const version of versions) {
    const filePath = path.join(versionsDir, version, 'codegen.json');
    if (!fs.existsSync(filePath)) continue;

    const raw = fs.readFileSync(filePath, 'utf-8');
    const data = JSON.parse(raw);

    for (const cls of data.classes) {
      // Use encoded class name as the route param (URL-safe)
      const encodedClassName = encodeURIComponent(cls.name);
      paths.push({
        params: { version, class: encodedClassName }
      });
    }
  }

  return paths;
}

// `params.class` is the URL param, which is encoded, so decode it here
const { params } = Astro;
const version = params.version;
const encodedClassName = params.class;

// Decode the class name to get the original name with special chars
const className = decodeURIComponent(encodedClassName);

// Sanitize the class name for filesystem-safe folder/file creation
const sanitizedClassName = sanitizeName(className);

// Load the JSON file for the version
const jsonPath = path.resolve(`src/data/versions/${version}/codegen.json`);

if (!fs.existsSync(jsonPath)) {
  throw new Error(`Version data not found for version '${version}'`);
}

const raw = fs.readFileSync(jsonPath, 'utf-8');
const data = JSON.parse(raw);

// Find the class data using the original class name (not encoded)
const classData = data.classes.find(c => c.name === className);
if (!classData) {
  throw new Error(`Class '${className}' not found in version '${version}'`);
}
---

<StarlightPage frontmatter={{ title: `${className} (${version})` }}>
  {classData.inherits?.length && (
    <p class="inherits"><strong>Inherits:</strong> {classData.inherits.join(', ')}</p>
  )}

  <ClassTable classData={classData} />
</StarlightPage>
