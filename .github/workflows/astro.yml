name: Deploy Astro site to Pages

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches: ["master"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "."

jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Python dependencies
        shell: pwsh
        working-directory: codegen
        run: |
          pip install poetry
          poetry install

      - name: Run Codegen
        shell: pwsh
        working-directory: codegen
        run: |
          $buildDir = Resolve-Path .\codegen\build
          $sourceDir = Resolve-Path .\codegen

          $executable = Join-Path $buildDir "Codegen.exe"
          $releaseExecutable = Join-Path $buildDir "Release\Codegen.exe"

          function Run-Command($cmd, $args) {
            Write-Host "Running: $cmd $args"
            $process = Start-Process -FilePath $cmd -ArgumentList $args -NoNewWindow -Wait -PassThru
            if ($process.ExitCode -ne 0) {
              Write-Error "Command failed with exit code $($process.ExitCode)"
              exit $process.ExitCode
            }
          }

          if (Test-Path $executable) {
            Write-Host "Found existing Codegen executable. Skipping build."
          } elseif (Test-Path $releaseExecutable) {
            Write-Host "Found existing Codegen Release executable. Skipping build."
            $executable = $releaseExecutable
          } else {
            if (-not (Test-Path $buildDir)) {
              New-Item -ItemType Directory -Path $buildDir | Out-Null
            }

            Run-Command "cmake" "-S $sourceDir -B $buildDir"
            Run-Command "cmake" "--build $buildDir --config Release"

            if (Test-Path $executable) {
              Write-Host "Build produced executable at $executable"
            } elseif (Test-Path $releaseExecutable) {
              Write-Host "Build produced executable at $releaseExecutable"
              $executable = $releaseExecutable
            } else {
              Write-Error "Executable not found after build"
              exit 1
            }
          }

          $bindingsDir = Resolve-Path .\bindings\bindings
          $outputBaseDir = Resolve-Path ..\src\data\versions

          if (-not (Test-Path $bindingsDir)) {
            Write-Error "Bindings directory not found: $bindingsDir"
            exit 1
          }

          if (-not (Test-Path $outputBaseDir)) {
            New-Item -ItemType Directory -Path $outputBaseDir | Out-Null
          }

          $successfulFolders = @()

          Get-ChildItem -Path $bindingsDir -Directory | Sort-Object Name | ForEach-Object {
            $folder = $_
            if ($folder.Name -ieq "include") {
              Write-Host "Skipping folder: $($folder.Name)"
              return
            }

            $entryBro = Join-Path $folder.FullName "Entry.bro"
            if (-not (Test-Path $entryBro)) {
              Write-Warning "Entry.bro not found in $($folder.Name), skipping."
              return
            }

            Write-Host "Running executable on folder: $($folder.Name)"

            $proc = Start-Process -FilePath $executable -ArgumentList "Win64", $folder.FullName, "./" -NoNewWindow -Wait -PassThru

            if ($proc.ExitCode -ne 0) {
              Write-Error "Codegen error in folder $($folder.Name) with return code $($proc.ExitCode)"
            } else {
              Write-Host "Completed folder: $($folder.Name)"
              $successfulFolders += $folder.Name
            }
          }

          foreach ($version in $successfulFolders) {
            $srcFile = Join-Path $bindingsDir "$version\Geode\CodegenData.json"
            $destDir = Join-Path $outputBaseDir $version
            $destFile = Join-Path $destDir "codegen.json"

            if (-not (Test-Path $srcFile)) {
              Write-Warning "CodegenData.json not found for $version at expected path: $srcFile"
              continue
            }

            if (-not (Test-Path $destDir)) {
              New-Item -ItemType Directory -Path $destDir | Out-Null
            }

            try {
              Copy-Item -Path $srcFile -Destination $destFile -Force
              Write-Host "Copied CodegenData.json for $version to $destFile"
            }
            catch {
              Write-Warning "Failed to copy CodegenData.json for $version: ${_}"
            }
          }

      - name: Detect package manager
        id: detect-package-manager
        shell: pwsh
        run: |
          if (Test-Path "$Env:GITHUB_WORKSPACE\yarn.lock") {
            Write-Output "manager=yarn" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "command=install" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "runner=yarn" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "lockfile=yarn.lock" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            exit 0
          }
          elseif (Test-Path "$Env:GITHUB_WORKSPACE\package.json") {
            Write-Output "manager=npm" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "command=ci" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "runner=npx --no-install" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "lockfile=package-lock.json" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            exit 0
          }
          else {
            Write-Error "Unable to determine package manager"
            exit 1
          }

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Install dependencies
        shell: pwsh
        run: "${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}"
        working-directory: ${{ env.BUILD_PATH }}

      - name: Build with Astro
        shell: pwsh
        run: |
          $runner = '${{ steps.detect-package-manager.outputs.runner }}'
          Invoke-Expression "$runner astro build --site '${{ steps.pages.outputs.origin }}' --base '${{ steps.pages.outputs.base_path }}'"
        working-directory: ${{ env.BUILD_PATH }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
