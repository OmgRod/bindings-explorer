name: Deploy Astro site to Pages

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches: ["master"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "."

jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      # --- Build Codegen if needed and run it on bindings folders ---
      - name: Build and run Codegen, then copy CodegenData.json
        shell: pwsh
        run: |
          $sourceDir = "$Env:GITHUB_WORKSPACE\bindings\codegen"
          $buildDir = "$sourceDir\build"
          $exePaths = @(
            "$buildDir\Codegen.exe",
            "$buildDir\Release\Codegen.exe"
          )

          # Find existing executable or build it
          $exe = $exePaths | Where-Object { Test-Path $_ } | Select-Object -First 1
          if (-not $exe) {
            Write-Host "Codegen executable not found. Building..."

            # Create build directory
            if (-not (Test-Path $buildDir)) { New-Item -ItemType Directory -Path $buildDir | Out-Null }

            # Configure CMake
            $cmakeConfigCmd = "cmake -S `"$sourceDir`" -B `"$buildDir`""
            Write-Host "Configuring CMake..."
            $configResult = Invoke-Expression $cmakeConfigCmd
            if ($LASTEXITCODE -ne 0) {
              Write-Error "CMake configuration failed."
              exit $LASTEXITCODE
            }

            # Build Codegen in Release mode
            $cmakeBuildCmd = "cmake --build `"$buildDir`" --config Release"
            Write-Host "Building project..."
            $buildResult = Invoke-Expression $cmakeBuildCmd
            if ($LASTEXITCODE -ne 0) {
              Write-Error "Build failed."
              exit $LASTEXITCODE
            }

            # Try to find exe again
            $exe = $exePaths | Where-Object { Test-Path $_ } | Select-Object -First 1
            if (-not $exe) {
              Write-Error "Codegen executable not found after build."
              exit 1
            }
          }
          else {
            Write-Host "Found existing Codegen executable at $exe"
          }

          # Run Codegen exe on each valid folder inside bindings/bindings
          $bindingsDir = "$Env:GITHUB_WORKSPACE\bindings\bindings"
          $outputBaseDir = "$Env:GITHUB_WORKSPACE\src\data\versions"

          if (-not (Test-Path $bindingsDir)) {
            Write-Error "Bindings directory not found: $bindingsDir"
            exit 1
          }

          if (-not (Test-Path $outputBaseDir)) {
            New-Item -ItemType Directory -Path $outputBaseDir | Out-Null
          }

          $successfulFolders = @()

          Get-ChildItem -Path $bindingsDir -Directory | Where-Object { $_.Name.ToLower() -ne "include" } | ForEach-Object {
            $folder = $_
            $entryBro = Join-Path $folder.FullName "Entry.bro"
            if (-not (Test-Path $entryBro)) {
              Write-Warning "Skipping $($folder.Name): Entry.bro not found"
              return
            }
            Write-Host "Running Codegen on folder: $($folder.Name)"
            # Run exe: args are: platform (Win64), folder path, output dir ("./")
            & $exe "Win64" $folder.FullName "./"
            if ($LASTEXITCODE -eq 0) {
              Write-Host "Completed folder: $($folder.Name)"
              $successfulFolders += $folder.Name
            }
            else {
              Write-Warning "Codegen failed on folder $($folder.Name) with exit code $LASTEXITCODE"
            }
          }

          # Copy CodegenData.json for each successful folder
          foreach ($version in $successfulFolders) {
            $srcFile = Join-Path $bindingsDir $version "Geode\CodegenData.json"
            if (-not (Test-Path $srcFile)) {
              Write-Warning "CodegenData.json not found for $version at $srcFile"
              continue
            }
            $destDir = Join-Path $outputBaseDir $version
            if (-not (Test-Path $destDir)) {
              New-Item -ItemType Directory -Path $destDir | Out-Null
            }
            $destFile = Join-Path $destDir "codegen.json"
            Copy-Item $srcFile $destFile -Force
            Write-Host "Copied CodegenData.json for $version to $destFile"
          }

      # --- Detect package manager, setup Node, build Astro site ---
      - name: Detect package manager
        id: detect-package-manager
        shell: pwsh
        run: |
          if (Test-Path "$Env:GITHUB_WORKSPACE\yarn.lock") {
            Write-Output "manager=yarn" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "command=install" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "runner=yarn" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "lockfile=yarn.lock" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            exit 0
          }
          elseif (Test-Path "$Env:GITHUB_WORKSPACE\package.json") {
            Write-Output "manager=npm" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "command=ci" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "runner=npx --no-install" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "lockfile=package-lock.json" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            exit 0
          }
          else {
            Write-Error "Unable to determine package manager"
            exit 1
          }

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Install dependencies
        shell: pwsh
        run: "${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}"
        working-directory: ${{ env.BUILD_PATH }}

      - name: Build with Astro
        shell: pwsh
        run: |
          $runner = '${{ steps.detect-package-manager.outputs.runner }}'
          Invoke-Expression "$runner astro build --site '${{ steps.pages.outputs.origin }}' --base '${{ steps.pages.outputs.base_path }}'"
        working-directory: ${{ env.BUILD_PATH }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
