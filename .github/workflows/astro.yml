name: Deploy Astro site to Pages

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches: ["master"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "."

jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Python
        working-directory: codegen
        run: |
          pip install poetry
          poetry install

      - name: Run Codegen
        shell: pwsh
        working-directory: codegen
        # run: ./codegen.ps1
        run: poetry run python main.py

      - name: Detect package manager
        id: detect-package-manager
        shell: pwsh
        run: |
          if (Test-Path "$Env:GITHUB_WORKSPACE\yarn.lock") {
            Write-Output "manager=yarn" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "command=install" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "runner=yarn" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "lockfile=yarn.lock" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            exit 0
          }
          elseif (Test-Path "$Env:GITHUB_WORKSPACE\package.json") {
            Write-Output "manager=npm" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "command=ci" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "runner=npx --no-install" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "lockfile=package-lock.json" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            exit 0
          }
          else {
            Write-Error "Unable to determine package manager"
            exit 1
          }

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Install dependencies
        shell: pwsh
        run: "${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}"
        working-directory: ${{ env.BUILD_PATH }}

      - name: Build with Astro
        shell: pwsh
        run: |
          $runner = '${{ steps.detect-package-manager.outputs.runner }}'
          Invoke-Expression "$runner astro build --site '${{ steps.pages.outputs.origin }}' --base '${{ steps.pages.outputs.base_path }}'"
        working-directory: ${{ env.BUILD_PATH }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
