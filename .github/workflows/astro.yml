name: Deploy Astro site to Pages

on:
  schedule:
    - cron: '0 0 * * *'
  push:
    branches: ["master"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "."

jobs:
  generate:
    strategy:
      matrix:
        config:
          - { platform: Win32, version: "2.204" }
          - { platform: MacOS, version: "2.200" }
          - { platform: Win64, version: "2.206" }
          - { platform: MacOS, version: "2.206" }
          - { platform: iOS, version: "2.206" }
          - { platform: Win64, version: "2.2074" }
          - { platform: MacOS, version: "2.2074" }
          - { platform: iOS, version: "2.2074" }

    name: Build
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Run Codegen
        shell: pwsh
        working-directory: codegen
        run: cmake -B build -S . -DGEODE_TARGET_PLATFORM=${{ matrix.config.platform }} -DGEODE_GD_VERSION=${{ matrix.config.version }} -DBINDINGS_REPO=${{ matrix.config.repo }}

      - name: Copy CodegenData.json files to src/data/versions
        shell: pwsh
        run: |
          $scriptDir = "${{ github.workspace }}/codegen"
          $bindingsDir = Join-Path $scriptDir "bindings/bindings"
          $outputBaseDir = Join-Path "${{ github.workspace }}" "src/data/versions"

          if (-not (Test-Path $bindingsDir)) {
            Write-Error "Bindings directory not found: $bindingsDir"
            exit 1
          }

          if (-not (Test-Path $outputBaseDir)) {
            New-Item -ItemType Directory -Path $outputBaseDir -Force | Out-Null
          }

          Get-ChildItem -Path $bindingsDir -Directory | Where-Object { $_.Name.ToLower() -ne "include" } | ForEach-Object {
            $folder = $_
            $codegenDataPath = Join-Path $folder.FullName "Geode\CodegenData.json"
            if (Test-Path $codegenDataPath) {
              $destDir = Join-Path $outputBaseDir $folder.Name
              if (-not (Test-Path $destDir)) {
                New-Item -ItemType Directory -Path $destDir -Force | Out-Null
              }
              $destFile = Join-Path $destDir "codegen.json"

              try {
                Copy-Item -Path $codegenDataPath -Destination $destFile -Force
                Write-Host "Copied CodegenData.json from $($folder.Name) to $destFile"
              }
              catch {
                Write-Warning "Failed to copy CodegenData.json for $($folder.Name): $($_.Exception.Message)"
              }
            }
            else {
              Write-Warning "CodegenData.json not found in folder $($folder.Name)"
            }
          }

      - name: Detect package manager
        id: detect-package-manager
        shell: pwsh
        run: |
          if (Test-Path "$Env:GITHUB_WORKSPACE\yarn.lock") {
            Write-Output "manager=yarn" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "command=install" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "runner=yarn" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "lockfile=yarn.lock" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            exit 0
          }
          elseif (Test-Path "$Env:GITHUB_WORKSPACE\package.json") {
            Write-Output "manager=npm" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "command=ci" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "runner=npx --no-install" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            Write-Output "lockfile=package-lock.json" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            exit 0
          }
          else {
            Write-Error "Unable to determine package manager"
            exit 1
          }

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
          cache-dependency-path: ${{ env.BUILD_PATH }}/${{ steps.detect-package-manager.outputs.lockfile }}

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - name: Install dependencies
        shell: pwsh
        run: "${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}"
        working-directory: ${{ env.BUILD_PATH }}

      - name: Build with Astro
        shell: pwsh
        run: |
          $runner = '${{ steps.detect-package-manager.outputs.runner }}'
          Invoke-Expression "$runner astro build --site '${{ steps.pages.outputs.origin }}' --base '${{ steps.pages.outputs.base_path }}'"
        working-directory: ${{ env.BUILD_PATH }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: generate
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4